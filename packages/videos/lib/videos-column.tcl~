ad_page_contract {
  This is a index to list videos

  @author Alessandro Landim
  @author Iuri Sampaio
  @date 2010-10-18
  $Id: site-master.tcl,v 1.22.2.7 2007/07/18 10:44:06 emmar Exp $
} {
    {video_id ""}
    {object_id ""}
} 

if {![exists_and_not_null video_id]} {
    set video_id $object_id
}
permission::require_permission -party_id [ad_conn user_id] -object_id $video_id -privilege read



set package_id [ad_conn package_id]

set revision_id [content::item::get_live_revision -item_id $video_id]
set video_url [content::revision::get_cr_file_path -revision_id $revision_id]

set url [site_node::get_url_from_object_id -object_id [ad_conn package_id]]
ns_log Notice "VIDEOS-VIEW URL: $url $revision_id "


set return_url [ad_return_url]

template::head::add_javascript -src "/resources/videos/swfobject.js" 




set video_in_queue [db_string select_video {select item_id from videos_queue where item_id = :video_id} -default ""]
set cont 1
if {![string equal $video_in_queue ""]} {
	set cont 0 
}

set image_size [parameter::get -package_id $package_id -parameter ImageSize]
set widthxheight [split $image_size "x"]
set width [lindex $widthxheight 0]
set height [lindex $widthxheight 1]
if {$width > 500} {
	set width [expr $width - 200]
}

db_1row select_video {
    select video_name, 
    video_description,
    video_date,
    creator_id
    from videos 
    where video_id = :video_id
} -column_array video


#Get user name to show as video info
set creator_id $video(creator_id)

set creator_name [db_string select_creator {
    select u.first_names || ' ' || u.last_name as name 
    from cc_users u 
    where u.user_id = :creator_id
}]






set admin_p [permission::permission_p -party_id [ad_conn user_id] -object_id $video_id -privilege admin]

set context [list "" $video(video_name)]

set title $video(video_name)
#set context $video(video_name)

set user_id [ad_conn user_id]

set package_url [apm_package_url_from_id $package_id]

set category_id [lindex [category::get_mapped_categories $video_id] 0]


set add_tag_link [tags::create_link -item_id $video_id -link_text "Add a Tag"]






set tags [db_list select_video_tags { 
    select tag from tags_tags where item_id = :video_id 
}]
ns_log Notice "TAGS $tags"


set video_ids [db_list select_videos {
    select item_id from tags_tags 
    where tag in (
		      select tag from tags_tags where item_id = :video_id
		      )
}]

ns_log Notice "VIDEOS $video_ids"

# Right Scrolling Videos

db_multirow -extend {} related_videos select_related_videos {} {
    foreach {category_id category_name} [videos::get_categories -package_id $package_id] {
        ns_log Notice "$category_id | $category_name"
        set cat_${category_id} [category::get_name [videos::get_category_child_mapped -category_id $category_id -object_id $video_id]]

    }
}



# Notifications
set notification_chunk [notification::display::request_widget \
    -type videos_video_notif \
    -object_id $video_id \
    -pretty_name "Video Item: $video_name" \
    -url [ad_conn url]?object_id=$video_id \
]

set type_id [notification::type::get_type_id -short_name videos_video_notif]
ns_log Notice "TYPEID $type_id"
set notification_count [notification::request::request_count \
			    -type_id $type_id \
			    -object_id $video_id]



# General Comments
set comment_add_url "[general_comments_package_url]comment-add?[export_vars {
 { object_id $video_id } 
 { object_name $$video_name } 
 { return_url "[ad_conn url]?[ad_conn query]"} 
}]"

set comments_html [general_comments_get_comments -print_content_p 1 $video_id]



videos::download_counter -user_id [ad_conn user_id] -package_id $package_id -revision_id $revision_id -video_id $video_id 


